# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  REPO_DIR: "numpy"
  BUILD_COMMIT: "master"
  TEST_DEPENDS: "pytest pytz"
  PLAT: "x64"

strategy:
  matrix:
    # linux64python3.5:
    #     imageName: "ubuntu-16.04"
    #     os: linux
    #    MB_PYTHON_VERSION: 3.5
    # linux32python3.5:
    #     imageName: "ubuntu-16.04"
    #     os: linux
    #     PLAT: i386
    #     MB_PYTHON_VERSION: 3.5
    # linux64python3.6:
    #     imageName: "ubuntu-16.04"
    #     MB_PYTHON_VERSION: 3.6
    # linux32python3.6:
    #     imageName: "ubuntu-16.04"
    #     PLAT: i386
    #     MB_PYTHON_VERSION: 3.6
    # linux64python3.7:
    #     imageName: "ubuntu-16.04"
    #     MB_PYTHON_VERSION: 3.7
    # linux32python3.7:
    #     imageName: "ubuntu-16.04"
    #     PLAT: i386
    #     MB_PYTHON_VERSION: 3.7
    # osXpython3.5:
    #     imageName: "macOS-10.13" # could also use macos-10.14
    #     MB_PYTHON_VERSION: 3.5
    # osXpython3.6:
    #     imageName: "macOS-10.13" # could also use macos-10.14
    #     MB_PYTHON_VERSION: 3.6
    # osXpython3.7:
    #     imageName: "macOS-10.13" # could also use macos-10.14
    #     MB_PYTHON_VERSION: 3.7
    win64python3.5:
        imageName: "VS2017-Win2016"
        MB_PYTHON_VERSION: "3.5"
    win32python3.5:
        imageName: "VS2017-Win2016"
        PLAT: "x86"
        MB_PYTHON_VERSION: "3.5"
    win64python3.6:
        imageName: "VS2017-Win2016"
        MB_PYTHON_VERSION: "3.6"
    win32python3.6:
        imageName: "VS2017-Win2016"
        PLAT: "x86"
        MB_PYTHON_VERSION: "3.6"
    win64python3.7:
        imageName: "VS2017-Win2016"
        MB_PYTHON_VERSION: "3.7"
    win32python3.7:
        imageName: "VS2017-Win2016"
        PLAT: "x86"
        MB_PYTHON_VERSION: "3.7"
pool:
    # see https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
    vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(MB_PYTHON_VERSION)'
    addToPath: true
    # only valid on windows vmImages
    architecture: '$(PLAT)'
- script: python -c"import sys; print(sys.version)"
  displayName: 'Print python version'
